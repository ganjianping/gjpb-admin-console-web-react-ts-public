import { useEffect, useState } from 'react';
import { Box, CircularProgress } from '@mui/material';
import { CSRFProtection } from '../../../shared-lib/src/utils/CSRFProtection';

interface CSRFInitializerProps {
  children: React.ReactNode;
}

/**
 * Component that initializes CSRF protection before rendering the app
 */
const CSRFInitializer = ({ children }: CSRFInitializerProps) => {
  const [initialized, setInitialized] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const initCSRF = async () => {
      try {
        console.info('Initializing CSRF protection...');
        const token = await CSRFProtection.initializeToken();
        console.info('CSRF token initialized successfully:', token ? 'success' : 'failed');
        setInitialized(true);
      } catch (err: any) {
        // Extract useful information from the error
        const errorMessage = err?.message || 'Unknown error';
        const statusCode = err?.response?.status || '';
        const statusText = err?.response?.statusText || '';
        const serverError = statusCode ? `${statusCode} ${statusText}` : '';
        
        console.error(`Failed to initialize CSRF protection: ${serverError} ${errorMessage}`);
        
        // We'll continue without CSRF token in case of error
        setError(err as Error);
        setInitialized(true);
        
        // In development mode, we'll create a mock token to allow the app to function
        // CSRFProtection will handle this internally, so no need to set it here
        if (import.meta.env.DEV) {
          console.warn('Development mode: app will continue with mock CSRF protection');
        } else {
          console.warn('Production mode: app will continue without CSRF protection');
        }
      }
    };

    // Add a timeout to prevent infinite loading if CSRF token fetch hangs
    const timeoutId = setTimeout(() => {
      if (!initialized) {
        console.warn('CSRF initialization timed out after 3 seconds, proceeding with app');
        setInitialized(true);
        setError(new Error('CSRF initialization timed out'));
        
        if (import.meta.env.DEV) {
          console.warn('Using development fallback for CSRF protection');
          CSRFProtection.enableMockMode();
        }
      }
    }, 3000); // 3 seconds timeout
    
    initCSRF();
    
    return () => clearTimeout(timeoutId);
  }, [initialized]);

  // Show loading indicator while initializing CSRF protection
  if (!initialized) {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '100vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  // Log error but still render the app
  if (error) {
    console.warn('App running without server CSRF protection:', error.message);
  }

  return <>{children}</>;
};

export default CSRFInitializer;
